<pre class="metadata">
Title: Compression Streams
Shortname: compression
Level: none
Status: draft
Group: wicg
ED: https://wicg.github.io/compression-streams/
Editor: Canon Mukai, Google
Editor: Adam Rice, Google
Abstract:
  This document defines a set of JavaScript APIs to compress and decompress
  a stream.
Repository: ricea/compression-streams
Indent: 2
Markup Shorthands: markdown yes
Boilerplate: omit conformance
</pre>
<pre class="link-defaults">
spec:streams; type:interface; text:ReadableStream
spec:html; type:dfn; for:/; text:origin
</pre>
<pre class="anchors">
urlPrefix: http://www.ecma-international.org/ecma-262/6.0/index.html; spec: ECMASCRIPT-6.0
  type: dfn
    text: fulfilled; url: sec-promise-objects
    text: rejected; url: sec-promise-objects
    text: pending; url: sec-promise-objects
    text: resolved; url: sec-promise-objects
    text: settled; url: sec-promise-objects
    
</pre>

# Introduction #    {#introduction}

*This section is non-normative.*

The APIs specified in this specification is used to compress and decompress streams of data. It supports "deflate" and "gzip" as compression algorithms they are widely used in web developpers.

# Conformance #  {#conformance}

As well as sections marked as non-normative, all authoring guidelines,
diagrams, examples, and notes in this specification are non-normative.
Everything else in this specification is normative.

The key words *MUST* and *SHOULD* are to be interpreted as described in
[[!RFC2119]].

This specification defines conformance criteria that apply to a single product:
the user agent that implements the interfaces that it contains.

Conformance requirements phrased as algorithms or specific steps may be
implemented in any manner, so long as the end result is equivalent. (In
particular, the algorithms defined in this specification are intended to be
easy to follow, and not intended to be performant.)

Implementations that use ECMAScript to implement the APIs defined in this
specification MUST implement them in a manner consistent with the ECMAScript
Bindings defined in the Web IDL specification [[!WEBIDL-1]], as this
specification uses that specification and terminology.

# Terminology #  {#terminology}

A chunk is a piece of data. In the case of CompressionStream and DecompressionStream, the chunk type is Uint8Array. 

A stream represents an ordered sequence of chunks. The terms {{ReadableStream}} and {{WritableStream}} are defined in
[[!WHATWG-STREAMS]].

Deflate is a compression format. Gzip is another compressoin format, also based on the deflate algorithm. Both deflate and gzip are defined in zlib.

# Interface Mixin `GenericTransformStream` #  {#generic-transform-stream}

The <dfn interface>GenericTransformStream</dfn> interface mixin represents the comcept of a transform stream in IDL. It is not a TransformStream, though it has the same interface and it delegates to one.

<pre class="idl">
interface mixin GenericTransformStream {
  readonly attribute ReadableStream readable; 
  readonly attribute WritableStream writable;
};
</pre>

An object that includes <dfn interface>GenericTransformStream</dfn> has an associated <dfn>transform</dfn> of type TransformStream.

## Attributes ##  {#outgoing-stream-attributes}

: <dfn attribute for="GenericTransformStream">readable</dfn>
:: The `readable` attribute's getter, when invoked, must return this object's transform {{[[readable]]}}.
: <dfn attribute for="GenericTransformStream">writable</dfn>
:: The `writable` attribute's getter, when invoked, must return this object's transform {{[[writable]]}}.

# Interface `CompressionStream` #  {#compression-stream}

A collection of common attributes and methods of all streams.

<pre class="idl">
[ Exposed=(Window,Worker)]
interface CompressionStream {
  constructor(DOMString format);
};
CompressionStream includes GenericTransformStream;
</pre>

The <dfn interface>CompressionStream(format)</dfn> constructor, when invoked, must run these steps:
    1. If <dfn>*format*</dfn> is unsupported in CompressionStream, then throw a TypeError.
    1. Let *cs* be a new CompressionStream object.
    1. Let *transformAlgorithm* be an algorithm which takes a *chunk* argument and runs the <dfn>compress and enqueue a chunk</dfn> algorithm with *cs* and *chunk*.
    1. If *chunk* is not of supported type, then throw a TypeError.
    1. Let *flushAlgorithm* be an algorithm which takes no argument and runs the flush and enqueue algorithm with *cs*.
    1. Construct TransformStream.

The <dfn>compress and enqueue a chunk</dfn> algorithm, given a CompressionStream object *cs* and a *chunk*, rus these steps:
    1. Let *buffer* be the result of compressing *chunk*. If this throws an exception, then return a promise rejected with that exception.
    1. Let *controller* be *cs*'s TransformStreamController.
    1. If *buffer* is non-empty, call Enqueue.
    1. Return a new promise resolved with undefined.

The <dfn>flush and enqueue</dfn> algorithm, which handles the end of data from the input ReadableStream object, given a CompressionStream object *cs*, runs these steps:

    1. Let *buffer* be the result of compressing an empty input with the finish flag.
    1. If *buffer* is non-empty, call Enqueue.
    1. Return a new promise resolved with undefined.
    

# Interface `DecompressionStream` #  {#decompression-stream}

A collection of common attributes and methods of all streams.

<pre class="idl">
[ Exposed=(Window,Worker)]
interface DecompressionStream {
  constructor(DOMString format);
};
DecompressionStream includes GenericTransformStream;
</pre>

The <dfn interface>DecompressionStream(format)</dfn> constructor, when invoked, must run these steps:
    1. If <dfn>*format*</dfn> is unsupported in DecompressionStream, then throw a TypeError.
    1. Let *ds* be a new DecompressionStream object.
    1. Let *transformAlgorithm* be an algorithm which takes a *chunk* argument and runs the <dfn>decompress and enqueue a chunk</dfn> algorithm with *ds* and *chunk*.
    1. If *chunk* is not of supported type, then throw a TypeError.
    1. Let *flushAlgorithm* be an algorithm which takes no argument and runs the flush and enqueue algorithm with *ds*.
    1. Construct TransformStream.

The <dfn>decompress and enqueue a chunk</dfn> algorithm, given a DecompressionStream object *ds* and a *chunk*, rus these steps:
    1. Let *buffer* be the result of decompressing *chunk*. If this throws an exception, then return a promise rejected with that exception.
    1. Let *controller* be *ds*'s TransformStreamController.
    1. If *buffer* is non-empty, call Enqueue.
    1. Return a new promise resolved with undefined.

The <dfn>flush and enqueue</dfn> algorithm, which handles the end of data from the input ReadableStream object, given a DecompressionStream object *ds*, runs these steps:

    1. Let *buffer* be the result of decompressing an empty input with the finish flag.
    1. If *buffer* is non-empty, call Enqueue.
    1. Return a new promise resolved with undefined.
    

# Privacy and Security Considerations #  {#privacy-security}

The API doesn't add any new privileges to the web platform.

However, web developpers have to pay attention to the situation when attackers can get the length of the data. If so, they may be able to guess the contents of the data.

# Examples #  {#examples}

## Gzip-compress a stream ##  {#example-gzip-compress-stream}

<pre class="example" highlight="js">
const compressiedReadableStream
    = inputReadableStream.pipeThrough(new CompressionStream('gzip'));
</pre>

## Deflate-compress an ArrayBuffer to a Uint8Array ##  {#example-deflate-compress}

<pre class="example" highlight="js">
async function compressArrayBuffer(in) {
  const cs = new CompressionStream('deflate');
  const writer = cs.writable.getWriter();
  writer.write(in);
  writer.close();
  const out = [];
  const reader = cs.readable.getReader();
  let totalSize = 0;
  while (true) {
    const { value, done } = await reader.read();
    if (done)
      break;
    out.push(value);
    totalSize += value.byteLength;
  }
  const concatenated = new Uint8Array(totalSize);
  let offset = 0;
  for (const array of out) {
    concatenated.set(array, offset);
    offset += array.byteLength;
  }
  return concatenated;
}
</pre>

## Gzip-decompress a Blob to Blob ##  {#example-gzip-decompress}

<pre class="example" highlight="js">
async function DecompressBlob(blob) {
  const ds = new DecompressionStream('gzip');
  const decompressionStream = blob.stream().pipeThrough(ds);
  return await new Response(decompressedStream).blob();
}
</pre>

# Acknowledgements #  {#acknowledgements}
The editors wish to thank Domenic Denicola and Yutaka Hirano, for their support. Contributions to this specification
were provided by Robin Raymond.

The {{QuicTransport}} and `QuicStream` objects were initially described in the
[W3C ORTC CG](https://www.w3.org/community/ortc/), and have been adapted for
use in this specification.